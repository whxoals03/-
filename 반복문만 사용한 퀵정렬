//퀵 정렬 재귀를 쓰지말고 반복문만 써서 / 함수 한개로 / 함수 두개로
/* 4 7 3 10 8 5 1 2 9 6
4 7 3 10 8 5 1 2 9 6 100 

4(피벗) 7(max) 3 10 8 5 1 2(min) 9 6 
4(피벗) 2(swap) 3 10 8 5 1 7(swap) 9 6 
4(피벗) 2 3 10(max) 8 5 1(min) 7 9 6 
4(피벗) 2(swap) 3 10 8 5 1 7(swap) 9 6 
4(피벗) 2 3 10(max) 8 5 1(min) 7 9 6 
4(피벗) 2 3 1(swap) 8 5 10(swap) 7 9 6 
1(swap) 2 3 4(swap) 8(피벗) 5 10 7 9 6
1 2 3 4 8(피벗) 5 10(max) 7 9 6(min) // max 값보다 왼쪽에 있으면 피벗과 위치를 바꿈 
1 2 3 4 8(피벗) 5 6(swap) 7 9 10(swap)
1 2 3 4 8(피벗) 5 6 7(min) 9(max) 10
1 2 3 4 7(swap) 5 6 8(swap) 9 10
1 2 3 4 7(피벗) 5 6(min) 8(max) 9 10
1 2 3 4 6(swap) 5 7(swap) 8 9 10
1 2 3 4 6(피벗) 5(min) 7(max) 8 9 10
1 2 3 4 5(swap) 6(swap) 7 8 9 10
 
*/


#include <stdio.h>
#define MAX 100

int main()
{
    int a[MAX];
    int n = 0;

    while (1)
    {
        if (scanf("%d", &a[n]) != 1)
        {
            break;
        }
        if (a[n] == 100)
        {
            break;
        }
        n++;
    }

    if (n > 1)
    {
        int Lstack[MAX];
        int Rstack[MAX];
        int top = -1;

        top++;
        Lstack[top] = 0;
        Rstack[top] = n - 1;

        while (top >= 0)
        {
            int left = Lstack[top];
            int right = Rstack[top];
            top--;

            while (left < right)
            {
                int pivot = a[(left + right) / 2];
                int i = left - 1;
                int j = right + 1;

                while (1)
                {
                    do
                    {
                    	i++;
                    } while (a[i] < pivot);

                    do
                    {
                        j--;
                    } while (a[j] > pivot);

                    if (i >= j)
                    {
                        break;
                    }

                    int t = a[i];
                    a[i] = a[j];
                    a[j] = t;
                }

                if ((j - left) < (right - (j + 1)))
                {
                    top++;
                    Lstack[top] = j + 1;
                    Rstack[top] = right;
                    right = j;
                }
                else
                {
                    top++;
                    Lstack[top] = left;
                    Rstack[top] = j;
                    left = j + 1;
                }
            }
        }
    }

    for (int i = 0; i < n; i++)
    {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}
